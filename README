# Introduction

The Pytorch project offers some excellent tutorials which are replicated here for the Spartan environment. 

https://github.com/pytorch/tutorials

Pytorch is a machine learning workflow, a subset of A.I., that involves data, creating models, optimising parameters, and training 
models.

In this example, the the FashionMNIST dataset is used to train a neural network that predicts if an input image belongs to one of 
the following classes: T-shirt/top, Trouser, Pullover, Dress, Coat, Sandal, Shirt, Sneaker, Bag, or Ankle boot.

## What is PyTorch?

PyTorch is a Python-based scientific computing package serving two broad purposes:

* A replacement for NumPy to use the power of GPUs and other accelerators.
* An automatic differentiation library that is useful to implement neural networks.

## Slurm Requirements

Load an interactive job
$ sinteractive --partition=gpgpu --gres=gpu:p100:4 --qos=gpgpuhpcadmin --time=04:00:00

Load modules
$ module load fosscuda/2019b 
$ module load pytorch/1.5.1-python-3.7.4

Note that the fosscuda/2019b modules consists of gcc-cuda/8.3.0-10.1.243 with OpenMPI: 3.1.4

See what else is loaded
$ module list

Run the machine-learning example.

$ python3 quickstart_tutorial.py

Or sumit the Slurm script

$ sbatch 2019pytorch.slurm

## Step-by-Step Explanation of Basic Tutorial

Start python, import libraries

$ python3
..
>>> import torch
>>> from torch import nn
>>> from torch.utils.data import DataLoader
>>> from torchvision import datasets
>>> from torchvision.transforms import ToTensor, Lambda, Compose
>>> import matplotlib.pyplot as plt

PyTorch has two primitives to work with data: torch.utils.data.DataLoader and torch.utils.data.Dataset. The Dataset primitive stores 
the samples and their corresponding labels, whereas the DataLoader primitive wraps an iterable around the Dataset.

The torchvision.datasets module contains Dataset objects for many real-world vision data. In this tutorial, we use the FashionMNIST 
dataset. Every TorchVision Dataset includes two arguments: transform and target_transform to modify the samples and labels 
respectively.

- - -
# Download training data from open datasets.
training_data = datasets.FashionMNIST(
    root="data",
    train=True,
    download=True,
    transform=ToTensor(),
)

# Download test data from open datasets.
test_data = datasets.FashionMNIST(
    root="data",
    train=False,
    download=True,
    transform=ToTensor(),
)
- - -


The Dataset is passed as an argument to DataLoader, which wraps an iterable over the dataset and supports automatic batching, 
sampling, shuffling and multiprocess data loading. A batch size of 64 is defined, i.e. each element in the dataloader iterable 
will return a batch of 64 features and labels.


- - -
batch_size = 64

# Create data loaders.
train_dataloader = DataLoader(training_data, batch_size=batch_size)
test_dataloader = DataLoader(test_data, batch_size=batch_size)

for X, y in test_dataloader:
    print("Shape of X [N, C, H, W]: ", X.shape)
    print("Shape of y: ", y.shape, y.dtype)
    break
- - -


## Creating Models

To define a neural network in PyTorch, we create a class that inherits from nn.Module. We define the layers of the network in the 
__init__ function and specify how data will pass through the network in the forward function. To accelerate operations in the neural 
network, we move it to the GPU if available.

- - -
# Get cpu or gpu device for training.
device = "cuda" if torch.cuda.is_available() else "cpu"
print("Using {} device".format(device))

# Define model
class NeuralNetwork(nn.Module):
    def __init__(self):
        super(NeuralNetwork, self).__init__()
        self.flatten = nn.Flatten()
        self.linear_relu_stack = nn.Sequential(
            nn.Linear(28*28, 512),
            nn.ReLU(),
            nn.Linear(512, 512),
            nn.ReLU(),
            nn.Linear(512, 10),
            nn.ReLU()
        )
    def forward(self, x):
        x = self.flatten(x)
        logits = self.linear_relu_stack(x)
        return logits
model = NeuralNetwork().to(device)
print(model)
- - -

## Optimizing the Model Parameters

To train a model, we need a loss function and an optimizer.

- - -
loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=1e-3)
- - -

In a single training loop, the model makes predictions on the training dataset (fed to it in batches), and backpropagates the 
prediction error to adjust the model's parameters.

- - -
def train(dataloader, model, loss_fn, optimizer):
    size = len(dataloader.dataset)
    for batch, (X, y) in enumerate(dataloader):
        X, y = X.to(device), y.to(device)
        # Compute prediction error
        pred = model(X)
        loss = loss_fn(pred, y)
        # Backpropagation
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        if batch % 100 == 0:
            loss, current = loss.item(), batch * len(X)
            print(f"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]")
- - -

Check the model's performance against the test dataset to ensure it is learning.

- - -
def test(dataloader, model):
    size = len(dataloader.dataset)
    model.eval()
    test_loss, correct = 0, 0
    with torch.no_grad():
        for X, y in dataloader:
            X, y = X.to(device), y.to(device)
            pred = model(X)
            test_loss += loss_fn(pred, y).item()
            correct += (pred.argmax(1) == y).type(torch.float).sum().item()
    test_loss /= size
    correct /= size
    print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \n")
- - -

The training process is conducted over several iterations (epochs). During each epoch, the model learns parameters to make better 
predictions. We print the model's accuracy and loss at each epoch; weâ€™d like to see the accuracy increase and the loss decrease with 
every epoch.

- - -
epochs = 5
for t in range(epochs):
    print(f"Epoch {t+1}\n-------------------------------")
    train(train_dataloader, model, loss_fn, optimizer)
    test(test_dataloader, model)
print("Done!")
- - -

## Saving Models

A common way to save a model is to serialize the internal state dictionary (containing the model parameters).

- - -
torch.save(model.state_dict(), "model.pth")
print("Saved PyTorch Model State to model.pth")
- - -


## Loading Models
The process for loading a model includes re-creating the model structure and loading the state dictionary into it.

- - -
model = NeuralNetwork()
model.load_state_dict(torch.load("model.pth"))
- - -

This model can now be used to make predictions.

- - -
classes = [
    "T-shirt/top",
    "Trouser",
    "Pullover",
    "Dress",
    "Coat",
    "Sandal",
    "Shirt",
    "Sneaker",
    "Bag",
    "Ankle boot",
]
model.eval()
x, y = test_data[0][0], test_data[0][1]
with torch.no_grad():
    pred = model(x)
    predicted, actual = classes[pred[0].argmax(0)], classes[y]
    print(f'Predicted: "{predicted}", Actual: "{actual}"')
- - -

